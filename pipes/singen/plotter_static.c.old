#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

#define MAX_SAMPLES 500000 // A large number to hold all samples
#define WINDOW_WIDTH 800
#define WINDOW_HEIGHT 600

// Sample data structure
typedef struct {
    double time;
    double value;
} Sample;

// Global variables for the plotter
Display *display;
Window window;
GC gc;
int screen;

Sample samples[MAX_SAMPLES];
int num_samples = 0;

// Function to draw the graph
void draw_graph() {
    // Clear the window
    XClearWindow(display, window);

    if (num_samples == 0) {
        return;
    }

    // Determine scaling factors
    double max_value = 110.0;
    double min_value = -110.0;

    double time_range = samples[num_samples - 1].time - samples[0].time;
    if (time_range == 0) time_range = 1.0; // Avoid division by zero

    double scale_x = (double)WINDOW_WIDTH / time_range;
    double scale_y = (double)WINDOW_HEIGHT / (max_value - min_value);

    // Draw the axes
    XDrawLine(display, window, gc, 0, WINDOW_HEIGHT / 2, WINDOW_WIDTH, WINDOW_HEIGHT / 2); // X-axis
    XDrawLine(display, window, gc, 0, 0, 0, WINDOW_HEIGHT); // Y-axis

    // Draw the points
    for (int i = 0; i < num_samples - 1; i++) {
        int x1 = (int)((samples[i].time - samples[0].time) * scale_x);
        int y1 = (int)(WINDOW_HEIGHT / 2 - samples[i].value * scale_y);
        int x2 = (int)((samples[i+1].time - samples[0].time) * scale_x);
        int y2 = (int)(WINDOW_HEIGHT / 2 - samples[i+1].value * scale_y);

        XDrawLine(display, window, gc, x1, y1, x2, y2);
    }
}

// Main event loop
void event_loop() {
    XEvent event;
    while (1) {
        XNextEvent(display, &event);
        if (event.type == Expose) {
            draw_graph();
        }
        if (event.type == KeyPress) {
            break;
        }
    }
}

// Function to set up the X11 window
void setup_x11() {
    display = XOpenDisplay(NULL);
    if (display == NULL) {
        fprintf(stderr, "Cannot open display\n");
        exit(1);
    }

    screen = DefaultScreen(display);
    unsigned long black = BlackPixel(display, screen);
    unsigned long white = WhitePixel(display, screen);

    window = XCreateSimpleWindow(display, RootWindow(display, screen),
                                 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, 1,
                                 black, white);

    XSelectInput(display, window, ExposureMask | KeyPressMask);
    XMapWindow(display, window);

    gc = XCreateGC(display, window, 0, NULL);
    XSetForeground(display, gc, black);
}

// Main function
int main() {
    setup_x11();
    
    // Read all samples from stdin
    double time, sample;
    while (fscanf(stdin, "%lf %lf", &time, &sample) == 2 && num_samples < MAX_SAMPLES) {
        samples[num_samples].time = time;
        samples[num_samples].value = sample;
        num_samples++;
    }

    // Process events and draw
    event_loop();
    
    // Cleanup
    XFreeGC(display, gc);
    XDestroyWindow(display, window);
    XCloseDisplay(display);

    return 0;
}

